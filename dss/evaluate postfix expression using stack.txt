#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>

#define MAX_SIZE 100

struct Stack {
    int arr[MAX_SIZE];
    int top;
};

struct Stack* createStack() {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->top = -1;
    return stack;
}

void push(struct Stack* stack, int data) {
    if (stack->top == MAX_SIZE - 1) {
        printf("Stack overflow. Cannot push.\n");
        exit(1);
    }
    stack->arr[++stack->top] = data;
}

int pop(struct Stack* stack) {
    if (stack->top == -1) {
        printf("Stack is empty. Cannot pop.\n");
        exit(1);
    }
    return stack->arr[stack->top--];
}

int evaluatePostfixExpression(char postfix[]) {
    struct Stack* stack = createStack();

    for (int i = 0; postfix[i] != '\0'; ++i) {
        if (isdigit(postfix[i])) {
            push(stack, postfix[i] - '0');  // Convert character to integer
        } else {
            int operand2 = pop(stack);
            int operand1 = pop(stack);

            switch (postfix[i]) {
                case '+':
                    push(stack, operand1 + operand2);
                    break;
                case '-':
                    push(stack, operand1 - operand2);
                    break;
                case '*':
                    push(stack, operand1 * operand2);
                    break;
                case '/':
                    push(stack, operand1 / operand2);
                    break;
                case '^':
                    push(stack, (int)pow(operand1, operand2));
                    break;
                default:
                    printf("Invalid operator in postfix expression.\n");
                    exit(1);
            }
        }
    }

    if (stack->top == 0) {
        return pop(stack);
    } else {
        printf("Invalid postfix expression.\n");
        exit(1);
    }
}

int main() {
    char postfix[MAX_SIZE];

    printf("Enter the postfix expression: ");
    fgets(postfix, MAX_SIZE, stdin);

    // Remove newline character if present
    for (int i = 0; postfix[i] != '\0'; ++i) {
        if (postfix[i] == '\n') {
            postfix[i] = '\0';
            break;
        }
    }

    int result = evaluatePostfixExpression(postfix);

    printf("Result of the postfix expression: %d\n", result);

    return 0;
}
