#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

void recursivePreOrder(struct Node* root) {
    if (root != NULL) {
        printf("%d ", root->data);
        recursivePreOrder(root->left);
        recursivePreOrder(root->right);
    }
}

void recursiveInOrder(struct Node* root) {
    if (root != NULL) {
        recursiveInOrder(root->left);
        printf("%d ", root->data);
        recursiveInOrder(root->right);
    }
}

void recursivePostOrder(struct Node* root) {
    if (root != NULL) {
        recursivePostOrder(root->left);
        recursivePostOrder(root->right);
        printf("%d ", root->data);
    }
}

void iterativePreOrder(struct Node* root) {
    if (root == NULL) {
        return;
    }

    struct Node* stack[100];
    int top = -1;

    stack[++top] = root;

    while (top >= 0) {
        struct Node* current = stack[top--];
        printf("%d ", current->data);

        if (current->right != NULL) {
            stack[++top] = current->right;
        }

        if (current->left != NULL) {
            stack[++top] = current->left;
        }
    }
}

void iterativeInOrder(struct Node* root) {
    if (root == NULL) {
        return;
    }

    struct Node* stack[100];
    int top = -1;
    struct Node* current = root;

    while (current != NULL || top >= 0) {
        while (current != NULL) {
            stack[++top] = current;
            current = current->left;
        }

        current = stack[top--];
        printf("%d ", current->data);

        current = current->right;
    }
}

void iterativePostOrder(struct Node* root) {
    if (root == NULL) {
        return;
    }

    struct Node* stack1[100];
    struct Node* stack2[100];
    int top1 = -1, top2 = -1;

    stack1[++top1] = root;

    while (top1 >= 0) {
        struct Node* current = stack1[top1--];
        stack2[++top2] = current;

        if (current->left != NULL) {
            stack1[++top1] = current->left;
        }

        if (current->right != NULL) {
            stack1[++top1] = current->right;
        }
    }

    while (top2 >= 0) {
        printf("%d ", stack2[top2--]->data);
    }
}

int main() {
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

    printf("Recursive Preorder: ");
    recursivePreOrder(root);
    printf("\n");

    printf("Recursive Inorder: ");
    recursiveInOrder(root);
    printf("\n");

    printf("Recursive Postorder: ");
    recursivePostOrder(root);
    printf("\n");

    printf("Iterative Preorder: ");
    iterativePreOrder(root);
    printf("\n");

    printf("Iterative Inorder: ");
    iterativeInOrder(root);
    printf("\n");

    printf("Iterative Postorder: ");
    iterativePostOrder(root);
    printf("\n");

    return 0;
}
