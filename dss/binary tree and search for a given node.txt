#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

struct Node* searchNode(struct Node* root, int key) {
    if (root == NULL || root->data == key) {
        return root;
    }

    struct Node* leftResult = searchNode(root->left, key);
    if (leftResult != NULL) {
        return leftResult;
    }

    return searchNode(root->right, key);
}

bool isNodePresent(struct Node* root, int key) {
    return searchNode(root, key) != NULL;
}

void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->data);
        inorderTraversal(root->right);
    }
}

int main() {
    // Creating the binary tree
    struct Node* root = createNode(1);
    root->left = createNode(2);
    root->right = createNode(3);
    root->left->left = createNode(4);
    root->left->right = createNode(5);
    root->right->left = createNode(6);
    root->right->right = createNode(7);

    printf("Original Tree Inorder Traversal: ");
    inorderTraversal(root);
    printf("\n");

    // Searching for a given node
    int searchKey = 5;
    struct Node* searchResult = searchNode(root, searchKey);

    if (searchResult != NULL) {
        printf("Node with key %d found in the tree.\n", searchKey);
    } else {
        printf("Node with key %d not found in the tree.\n", searchKey);
    }

    // Using isNodePresent function
    int checkKey = 8;
    if (isNodePresent(root, checkKey)) {
        printf("Node with key %d found in the tree.\n", checkKey);
    } else {
        printf("Node with key %d not found in the tree.\n", checkKey);
    }

    return 0;
}
