#include <stdio.h>
#include <stdlib.h>

struct Node {
    int key;
    struct Node* left;
    struct Node* right;
};

struct Node* createNode(int key) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->key = key;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

struct Node* insert(struct Node* root, int key) {
    if (root == NULL) {
        return createNode(key);
    }

    if (key < root->key) {
        root->left = insert(root->left, key);
    } else if (key > root->key) {
        root->right = insert(root->right, key);
    }

    return root;
}

void inorderTraversal(struct Node* root) {
    if (root != NULL) {
        inorderTraversal(root->left);
        printf("%d ", root->key);
        inorderTraversal(root->right);
    }
}

int findMin(struct Node* root) {
    if (root == NULL) {
        printf("BST is empty.\n");
        return -1;  // Assuming -1 as a default value for an empty tree
    }

    while (root->left != NULL) {
        root = root->left;
    }

    return root->key;
}

int findMax(struct Node* root) {
    if (root == NULL) {
        printf("BST is empty.\n");
        return -1;  // Assuming -1 as a default value for an empty tree
    }

    while (root->right != NULL) {
        root = root->right;
    }

    return root->key;
}

int main() {
    struct Node* root = NULL;

    // Inserting elements into the BST
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);

    // Finding minimum and maximum keys
    int minKey = findMin(root);
    int maxKey = findMax(root);

    printf("Inorder Traversal: ");
    inorderTraversal(root);
    printf("\n");

    printf("Minimum Key in BST: %d\n", minKey);
    printf("Maximum Key in BST: %d\n", maxKey);

    return 0;
}
