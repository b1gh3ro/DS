#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

struct Node* insertAtBeginning(struct Node* head, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = head;
    return newNode;
}

struct Node* insertAtIndex(struct Node* head, int data, int index) {
    if (index < 0) {
        printf("Invalid index\n");
        return head;
    }

    if (index == 0) {
        return insertAtBeginning(head, data);
    }

    struct Node* newNode = createNode(data);
    struct Node* current = head;

    for (int i = 0; i < index - 1; ++i) {
        if (current == NULL) {
            printf("Index out of bounds\n");
            return head;
        }
        current = current->next;
    }

    newNode->next = current->next;
    current->next = newNode;

    return head;
}

struct Node* insertAtEnd(struct Node* head, int data) {
    struct Node* newNode = createNode(data);

    if (head == NULL) {
        return newNode;
    }

    struct Node* current = head;

    while (current->next != NULL) {
        current = current->next;
    }

    current->next = newNode;
    return head;
}

struct Node* deleteAtBeginning(struct Node* head) {
    if (head == NULL) {
        printf("List is empty, cannot delete.\n");
        return NULL;
    }

    struct Node* newHead = head->next;
    free(head);
    return newHead;
}

struct Node* deleteAtIndex(struct Node* head, int index) {
    if (head == NULL || index < 0) {
        printf("List is empty or invalid index.\n");
        return head;
    }

    if (index == 0) {
        return deleteAtBeginning(head);
    }

    struct Node* current = head;

    for (int i = 0; i < index - 1; ++i) {
        if (current == NULL || current->next == NULL) {
            printf("Index out of bounds\n");
            return head;
        }
        current = current->next;
    }

    struct Node* temp = current->next;
    current->next = temp->next;
    free(temp);

    return head;
}

struct Node* deleteAtEnd(struct Node* head) {
    if (head == NULL) {
        printf("List is empty, cannot delete.\n");
        return NULL;
    }

    if (head->next == NULL) {
        free(head);
        return NULL;
    }

    struct Node* current = head;

    while (current->next->next != NULL) {
        current = current->next;
    }

    free(current->next);
    current->next = NULL;

    return head;
}

void display(struct Node* head) {
    struct Node* current = head;

    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }

    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;
    int choice, data, index;

    while (1) {
        printf("\nSingly Linked List Operations:\n");
        printf("1. Display List\n");
        printf("2. Insert at Beginning\n");
        printf("3. Insert at Index\n");
        printf("4. Insert at End\n");
        printf("5. Delete at Beginning\n");
        printf("6. Delete at Index\n");
        printf("7. Delete at End\n");
        printf("8. Exit\n");

        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                display(head);
                break;
            case 2:
                printf("Enter data to insert at the beginning: ");
                scanf("%d", &data);
                head = insertAtBeginning(head, data);
                break;
            case 3:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                printf("Enter index to insert at: ");
                scanf("%d", &index);
                head = insertAtIndex(head, data, index);
                break;
            case 4:
                printf("Enter data to insert at the end: ");
                scanf("%d", &data);
                head = insertAtEnd(head, data);
                break;
            case 5:
                head = deleteAtBeginning(head);
                break;
            case 6:
                printf("Enter index to delete: ");
                scanf("%d", &index);
                head = deleteAtIndex(head, index);
                break;
            case 7:
                head = deleteAtEnd(head);
                break;
            case 8:
                printf("Exiting the program.\n");
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
