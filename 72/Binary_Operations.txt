#include <stdio.h>
#include <stdlib.h>
struct TreeNode {
int data;
struct TreeNode* left;
struct TreeNode* right;
};
struct TreeNode* createNode(int value) {
struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
if (newNode != NULL) {
newNode->data = value;
newNode->left = NULL;
newNode->right = NULL;
}
return newNode;
}
struct TreeNode* insert(struct TreeNode* root, int value) {
if (root == NULL) {
return createNode(value);
}
if (root->left == NULL) {
root->left = insert(root->left, value);
} 
else if (root->right == NULL) 
{
root->right = insert(root->right, value);
} 
else
 {
root->left = insert(root->left, value);
}
return root;
}
struct TreeNode* deleteNode(struct TreeNode* root, int value) {
if (root == NULL) {
return root;
}
if (root->data == value && root->left == NULL && root->right == NULL) {
free(root);
return NULL;
}
root->left = deleteNode(root->left, value);
root->right = deleteNode(root->right, value);
return root;
}
struct TreeNode* search(struct TreeNode* root, int value) {
if (root == NULL || root->data == value) {
return root;
}
struct TreeNode* leftResult = search(root->left, value);
struct TreeNode* rightResult = search(root->right, value);
return (leftResult != NULL) ? leftResult : rightResult;
}
struct TreeNode* createMirrorImage(struct TreeNode* root) {
if (root == NULL) {
return NULL;
}
struct TreeNode* newNode = createNode(root->data);
newNode->left = createMirrorImage(root->right);
newNode->right = createMirrorImage(root->left);
return newNode;
}
void inOrderTraversal(struct TreeNode* root) {
if (root != NULL) {
inOrderTraversal(root->left);
printf("%d ", root->data);
inOrderTraversal(root->right);
}
}
void preOrderTraversal(struct TreeNode* root) {
if (root != NULL) {
printf("%d ", root->data);
preOrderTraversal(root->left);
preOrderTraversal(root->right);
}
}
void postOrderTraversal(struct TreeNode* root) {
if (root != NULL) {
postOrderTraversal(root->left);
postOrderTraversal(root->right);
printf("%d ", root->data);
}
}
void freeTree(struct TreeNode* root) {
if (root != NULL) {
freeTree(root->left);
freeTree(root->right);
free(root);
}
}
int main() {
struct TreeNode* root = NULL;
root = insert(root, 1);
insert(root, 2);
insert(root, 3);
insert(root, 4);
insert(root, 5);
printf("Original Binary Tree (In-order): ");
inOrderTraversal(root);
printf("\n");
printf("Original Binary Tree (Pre-order): ");
preOrderTraversal(root);
printf("\n");
printf("Original Binary Tree (Post-order): ");
postOrderTraversal(root);
printf("\n");
int searchValue = 3;
struct TreeNode* searchResult = search(root, searchValue);
if (searchResult != NULL)
 {
printf("Found %d in the binary tree.\n", searchValue);
} 
else
 {
printf("%d not found in the binary tree.\n", searchValue);
}
int deleteValue = 4;
root = deleteNode(root, deleteValue);
printf("Binary Tree after deleting %d (In-order): ", deleteValue);
inOrderTraversal(root);
printf("\n");
struct TreeNode* mirrorRoot = createMirrorImage(root);
printf("Mirror Image of Binary Tree (In-order): ");
inOrderTraversal(mirrorRoot);
printf("\n");
freeTree(root);
freeTree(mirrorRoot);
return 0;
}
