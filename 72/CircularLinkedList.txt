#include<stdio.h>
#include<stdlib.h>
struct Node{
int data;
struct Node *next;
};
struct Node *head,*tail;
void Create(int i){

struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
printf("Enter the data in the node %d: ",i);
scanf("%d",&(newNode->data));
newNode->next=NULL;
if(head==NULL){
head=newNode;
tail=newNode;
}
else{
tail->next=newNode;
tail=newNode;
}
tail->next=head;
}

void linkedListTraversal(struct Node * head){
struct Node *ptr=head;
while(ptr->next!=head){
printf("%d\n",ptr->data);
ptr=ptr->next;
}
printf("%d\n",ptr->data);
}
struct Node * InsertAtBeg(struct Node *head){
struct Node *ptr=(struct Node*)malloc(sizeof(struct Node));
printf("enter the data in the new Node\n");
scanf("%d",&ptr->data);
tail->next=ptr;
ptr->next=head;
head=ptr;
return head;
}
struct Node * InsertAtIndex(struct Node *head){
struct Node *ptr=(struct Node *)malloc(sizeof(struct Node));
struct Node *p=head->next;
int index;
printf("enter the data in the new Node\n");
scanf("%d",&ptr->data);
printf("Enter the index: ");
scanf("%d",&index);
if(index==0){
InsertAtBeg(head);
}
int i=0;
while(i!=(index-1)){
p=p->next;
i++;
}
ptr->next= p->next;
 p->next=ptr; return head; }
struct Node * InsertAtEnd(struct Node *head)
{ struct Node *ptr= (struct Node *)malloc(sizeof(struct Node));
 struct Node *p=head->next; 
printf("enter the data in the new Node\n");
 scanf("%d",&ptr->data);
 while(p->next!=head){
 p=p->next; 
}ptr->next=p->next;
 p->next=ptr;
 tail=ptr;
 return head;
 }
struct Node *DeleteAtBeg(struct Node *head)
{
 struct Node *ptr=head,*p=head;
 while(ptr->next!=head)
{ 
ptr=ptr->next;
 }
ptr->next=head->next;
 head=ptr->next; 
free(p);
 return head;
 }struct Node *DeleteAtEnd(struct Node *head)
{ 
if(head==NULL)
{
 printf("UnderflowI\n");
 }
else if(head==tail){
 tail=NULL; 
free(head);
 }
else
{ struct Node *p=head; 
struct Node *q=head->next;
 while(q->next!=head)
{ p=p->next; 
q=q->next; }
p->next=q->next;
 tail=p; 
free(q); 
}
return head; 
}

struct Node *DeleteAtindex(struct Node *head){
int n,i=0;
struct Node *p=head;
struct Node *q=head->next;
printf("Enter the index at which the node is to be deleted: ");
scanf("%d",&n);
if(n==0){
DeleteAtBeg(head);
}
while(i!=n-1){
p=p->next;
q=q->next;
i++;
}
p->next=q->next;
free(q);
return head;
}
int main()
{
int choice,num;
int index;
int n;
printf("Enter the no.of nodes need to be added: ");
scanf("%d",&n);
for(int i=0;i<n;i++){
Create(i);
}
while(1){
printf("Operations on Circular linked list are: \n1.Insert at begining.\n");
printf("2.Insert at index.\n");
printf("3.Insert at end.\n");
printf("4.Delete at first\n");
printf("5.Delete at index\n");
printf("6.Delete at last\n");
printf("7.End\n");
printf("Enter the choice of insertion you need in linked list: ");
scanf("%d",&choice);
switch (choice){
case 1 :
printf("Linked list before insertion:\n");
linkedListTraversal(head);
fflush(stdin);
head=InsertAtBeg(head);
 printf("After insertion at begining:\n");
 linkedListTraversal(head); break; 
case 2 :
 printf("Linked list before insertion:\n");
 linkedListTraversal(head);
 fflush(stdin); 
head=InsertAtIndex(head); 
printf("After insertion\n");
 linkedListTraversal(head);
 break; 
case 3: 
printf("Linked list before insertion:\n"); 
linkedListTraversal(head); 
head=InsertAtEnd(head);
 printf(" After insertion at end: \n");
 linkedListTraversal(head); 
break;
 case 4:
 printf("Deleting the Node at begining\n");
 head=DeleteAtBeg(head); 
printf("Linked list after Deletion\n");
 linkedListTraversal(head); 
break; 
case 5: 
head=DeleteAtindex(head); 
printf("Linked list after Deletion\n");
 linkedListTraversal(head); 
break; 
case 6:
 printf("Deleting the last Node\n");
 head=DeleteAtEnd(head);
 printf("Linked list after Deletion\n");
 linkedListTraversal(head);
 break; 
case 7:
 printf("The program has ended\n");
 exit(0);
 default:
 printf("****** Invalid choice *******\n");
 break; 
} 
}
return 0;
 }

