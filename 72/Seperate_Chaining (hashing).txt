#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node* next;
};
struct HashTable {
int size;
struct Node** table;
};
struct Node* createNode(int data) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
if (newNode != NULL) {
newNode->data = data;
newNode->next = NULL;
}
return newNode;
}
struct HashTable* createHashTable(int size) {
struct HashTable* hashTable = (struct HashTable*)malloc(sizeof(struct
HashTable));
if (hashTable != NULL) {
hashTable->size = size;
hashTable->table = (struct Node**)malloc(sizeof(struct Node*) * size);
// Initialize each bucket with NULL
for (int i = 0; i < size; i++) {
hashTable->table[i] = NULL;
}
}
return hashTable;
}

int hashFunction(struct HashTable* hashTable, int key) {
return key % hashTable->size;
}

void insert(struct HashTable* hashTable, int key) {

int hashValue = hashFunction(hashTable, key);

struct Node* newNode = createNode(key);
// If the bucket is empty, insert at the beginning
if (hashTable->table[hashValue] == NULL) {
hashTable->table[hashValue] = newNode;
} else {

int i = 1;
while (hashTable->table[(hashValue + i) % hashTable->size] != NULL && i <
hashTable->size) {
i++;
}

if (i < hashTable->size) {
hashTable->table[(hashValue + i) % hashTable->size] = newNode;
}
}
}
void displayHashTable(struct HashTable* hashTable) {
for (int i = 0; i < hashTable->size; i++) {
printf("Bucket %d:", i);
struct Node* current = hashTable->table[i];
while (current != NULL) {
printf(" %d", current->data);
current = current->next;
}
printf("\n");
}
}
int main() {
struct HashTable* hashTable = createHashTable(5);

insert(hashTable, 12);
insert(hashTable, 22);
insert(hashTable, 7);
insert(hashTable, 42);
insert(hashTable, 32);
displayHashTable(hashTable);
for (int i = 0; i < hashTable->size; i++) {
struct Node* current = hashTable->table[i];
while (current != NULL) {
struct Node* next = current->next;
free(current);
current = next;
}
}
free(hashTable->table);
free(hashTable);
return 0;
}