#include<stdio.h>
#include<stdlib.h>
struct Node{
int data;
struct Node *next;
};
struct Node *head,*tail;
//To display the linked list data
void linkedListTraversal()
{
struct Node *ptr=head;
while(ptr!=NULL)
{
printf("Element: %d\n", ptr->data);
ptr = ptr->next;
}
}
struct Node * InsertAtfirst(struct Node *head,int data){
struct Node *ptr=(struct Node*)malloc(sizeof(struct Node));
ptr->data=data;
if(head == NULL) { // check if the list is empty
head = ptr;
ptr->next = NULL;
}
4
ptr->next=head;
head=ptr;
return head;
}
struct Node * InsertAtIndex(struct Node *head,int data,int index){
struct Node *ptr=(struct Node *)malloc(sizeof(struct Node));
struct Node *p=head;
ptr->data=data;
if(head == NULL) { // check if the list is empty
head = ptr;
ptr->next = NULL;
}
else if(index==0){
head=InsertAtfirst(head,data);
}
int i=0;
while(i!=(index-1)){
p=p->next;
i++;
}
ptr->next= p->next;
p->next=ptr;
return head;
}
struct Node * InsertAtEnd(struct Node *head,int data){
struct Node *ptr= (struct Node *)malloc(sizeof(struct Node));
struct Node *p=head;
ptr->data=data;
5
if(head == NULL) { // check if the list is empty
head = ptr;
ptr->next = NULL;
}
while(p->next!=NULL){
p=p->next;
}
p->next=ptr;
ptr->next=NULL;
return head;
}
struct Node * deleteFirst(struct Node * head){
struct Node * ptr = head;
if(head == NULL) { // check if the list is empty
printf("The list is empty\n");
}
head = head->next;
free(ptr);
return head;
}
struct Node * deleteAtIndex(struct Node * head, int index){
struct Node *p = head;
struct Node *q = head->next;
if(head == NULL) { // check if the list is empty
printf("The list is empty\n");
}
if(index==0){
6
head=deleteFirst(head);
}
for (int i = 1; i < index-1; i++)
{
p = p->next;
q = q->next;
}
p->next = q->next;
free(q);
return head;
}
struct Node *deleteAtLast(struct Node * head){
struct Node *p = head;
struct Node *q = head->next;
if(head == NULL) { // check if the list is empty
printf("The list is empty\n");
}
while(q->next !=NULL)
{
p = p->next;
q = q->next;
}
p->next = NULL;
free(q);
return head;
}
void Create(int i){
7
struct Node *newNode=(struct Node*)malloc(sizeof(struct Node));
printf("Enter the data in the node %d: ",i);
scanf("%d",&(newNode->data));
newNode->next=NULL;
if(head==NULL){
head=newNode;
tail=newNode;
}
else{
tail->next=newNode;
tail=newNode;
}
}
int main()
{
int choice,num;
int index;//index only for inserting at an index operation
int n;
printf("Enter the no.of nodes need to be added: ");
scanf("%d",&n);
for(int i=0;i<n;i++){
Create(i);
}
linkedListTraversal();
while(1){
printf("Operations on linked list are: \n1.Insert at begining.\n");
printf("2.Insert at index.\n");
printf("3.Insert at end.\n");
printf("4.Delete at first\n");
8
printf("5.Delete at index\n");
printf("6.Delete at last\n");
printf("7.End\n");
printf("Enter the choice of insertion you need in linked list: ");
scanf("%d",&choice);
switch(choice){
case 1 :
printf("Linked list before insertion:\n");
linkedListTraversal();
printf("Enter the data to be inserted: ");
scanf("%d",&num);
head = InsertAtfirst(head,num);
printf("After insertion at begining:\n");
linkedListTraversal(head);
break;
case 2 :
printf("Linked list before insertion:\n");
linkedListTraversal();
printf("Enter the data to be inserted: ");
scanf("%d",&num);
fflush(stdin);
printf("Enter the index at which the node to be inserted: ");
scanf("%d",&index);
head = InsertAtIndex(head,num,index);
printf(" After insertion at index %d :\n",index);
9
linkedListTraversal();
break;
case 3:
printf("Linked list before insertion:\n");
linkedListTraversal();
printf("Enter the data to be inserted: ");
scanf("%d",&num);
head = InsertAtEnd(head,num);
printf(" After insertion at end: \n");
linkedListTraversal();
break;
case 4:
printf("Deleting the first Node\n");
head=deleteFirst(head);
printf("Linked list after Deletion\n");
linkedListTraversal();
break;
case 5:
printf("Enter the index at which the node is to be deleted:");
scanf("%d",&index);
head=deleteAtIndex(head,index);
printf("Linked list after Deletion\n");
linkedListTraversal();
break;
case 6:
printf("Deleting the last Node\n");
head=deleteAtLast(head);
printf("Linked list after Deletion\n");
linkedListTraversal();
break;
10
case 7:
printf("The program has ended\n");
exit(0);
default:
printf("****** Invalid choice *******\n");
}
}
return 0;
}
