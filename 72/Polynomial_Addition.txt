#include <stdio.h>
#include <stdlib.h>
struct Node {
int coefficient;
int exponent;
struct Node *next;
};
struct Node *createNode(int coefficient, int exponent) {
struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
if (newNode == NULL) {
printf("Memory allocation failed.\n");
exit(EXIT_FAILURE);
}
newNode->coefficient = coefficient;
newNode->exponent = exponent;
newNode->next = NULL;
return newNode;
}
void insertTerm(struct Node **poly, int coefficient, int exponent) {
struct Node *newTerm = createNode(coefficient, exponent);
if (*poly == NULL) { *poly = newTerm;
} else {
struct Node *current = *poly;
struct Node *prev = NULL;
while (current != NULL && current->exponent > exponent) {
prev = current;
current = current->next;
}

if (prev == NULL) {
newTerm->next = *poly; *poly = newTerm;
} 
else 
{
prev->next = newTerm;
newTerm->next = current;
}
}
}
struct Node *addPolynomials(struct Node *poly1, struct Node *poly2) {
78
struct Node *result = NULL;
while (poly1 != NULL && poly2 != NULL) {
if (poly1->exponent > poly2->exponent) {
insertTerm(&result, poly1->coefficient, poly1->exponent);
poly1 = poly1->next;
} else if (poly1->exponent < poly2->exponent) {
insertTerm(&result, poly2->coefficient, poly2->exponent);
poly2 = poly2->next;
} 
else 
{
int sum = poly1->coefficient + poly2->coefficient;
if (sum != 0) {
insertTerm(&result, sum, poly1->exponent);
}
poly1 = poly1->next;
poly2 = poly2->next;
}
}
while (poly1 != NULL) {
insertTerm(&result, poly1->coefficient, poly1->exponent);
poly1 = poly1->next;
}
while (poly2 != NULL) {
insertTerm(&result, poly2->coefficient, poly2->exponent);
poly2 = poly2->next;
79
}
return result;
}
void displayPolynomial(struct Node *poly) {
while (poly != NULL) {
printf("%dx^%d", poly->coefficient, poly->exponent);
poly = poly->next;
if (poly != NULL) {
printf(" + ");
}
}
printf("\n");
}

void freePolynomial(struct Node *poly) {
struct Node *temp;
while (poly != NULL) {
temp = poly;
poly = poly->next;
free(temp);
}
}
int main() {

struct Node *poly1 = NULL;
struct Node *poly2 = NULL;

insertTerm(&poly1, 3, 2);
insertTerm(&poly1, 2, 1);
insertTerm(&poly1, 5, 0);
insertTerm(&poly2, 1, 3);
insertTerm(&poly2, 4, 2);
insertTerm(&poly2, 2, 0);
printf("Polynomial 1: ");
displayPolynomial(poly1);
printf("Polynomial 2: ");
displayPolynomial(poly2);
struct Node *sum = addPolynomials(poly1, poly2);
printf("Sum of polynomials: ");
displayPolynomial(sum);
// Free the allocated memory
freePolynomial(poly1);
freePolynomial(poly2);
freePolynomial(sum);
return 0;
}