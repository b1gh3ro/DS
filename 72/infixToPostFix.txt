#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#define MAX_SIZE 100
struct Stack {
char arr[MAX_SIZE];
int top;
};

void initializeStack(struct Stack *stack) {
stack->top = -1;
}
int isEmpty(struct Stack *stack) {
return stack->top == -1;
}
int isFull(struct Stack *stack) {
return stack->top == MAX_SIZE - 1;
}

void push(struct Stack *stack, char value) {
if (isFull(stack)) {
printf("Stack overflow. Cannot push element.\n");
exit(EXIT_FAILURE);
}
stack->arr[++stack->top] = value;
}

char pop(struct Stack *stack) {
if (isEmpty(stack)) {
printf("Stack underflow. Cannot pop element.\n");
exit(EXIT_FAILURE);
}
return stack->arr[stack->top--];
}

int getPrecedence(char operator) {
switch (operator) {
case '+':
case '-':
return 1;
case '*':
case '/':
return 2;
case '^':
return 3;
73
default:
return -1; 
}
}
void infixToPostfix(char *infix, char *postfix) {
struct Stack stack;
initializeStack(&stack);
int i, j;
for (i = 0, j = 0; infix[i] != '\0'; ++i) {
if (isalnum(infix[i])) {
// If the current character is an operand, add it to the postfix expression
postfix[j++] = infix[i];
} else if (infix[i] == '(') {

push(&stack, infix[i]);
} else if (infix[i] == ')') {

while (!isEmpty(&stack) && stack.arr[stack.top] != '(') {
postfix[j++] = pop(&stack);
}
if (!isEmpty(&stack) && stack.arr[stack.top] == '(') {
pop(&stack); 
} 
else
 {
printf("Invalid expression. Mismatched parentheses.\n");
exit(EXIT_FAILURE);
}
} else {
while 
(!isEmpty(&stack) && getPrecedence(stack.arr[stack.top]) >=
getPrecedence(infix[i]))
 {
postfix[j++] = pop(&stack);
}

push(&stack, infix[i]);
}
}

while (!isEmpty(&stack)) {
if (stack.arr[stack.top] == '(') {
printf("Invalid expression. Mismatched parentheses.\n");
exit(EXIT_FAILURE);
}
postfix[j++] = pop(&stack);
}
// Add null terminator to the postfix expression
postfix[j] = '\0';
}
int main() {
char infix[] = "a+b*(c^d-e)^(f+g*h)-i";
char postfix[MAX_SIZE];
infixToPostfix(infix, postfix);
printf("Infix expression: %s\n", infix);
75
printf("Postfix expression: %s\n", postfix);
return 0;
}