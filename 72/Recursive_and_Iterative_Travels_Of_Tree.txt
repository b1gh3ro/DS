#include <stdio.h>
#include <stdlib.h>
struct TreeNode {
int data;
struct TreeNode* left;
struct TreeNode* right;
};
struct TreeNode* createNode(int value) {
struct TreeNode* newNode = (struct TreeNode*)malloc(sizeof(struct TreeNode));
if (newNode != NULL) {
newNode->data = value;
newNode->left = NULL;
newNode->right = NULL;
}
return newNode;
}

struct TreeNode* insert(struct TreeNode* root, int value) {
if (root == NULL) {
return createNode(value);
}
if (value < root->data) {
root->left = insert(root->left, value);
} else if (value > root->data) {
root->right = insert(root->right, value);
}
return root;
}
void inOrderRecursive(struct TreeNode* root) {
if (root != NULL) {
inOrderRecursive(root->left);
printf("%d ", root->data);
inOrderRecursive(root->right);
}
}

void preOrderRecursive(struct TreeNode* root) {
if (root != NULL) {
92
printf("%d ", root->data);
preOrderRecursive(root->left);
preOrderRecursive(root->right);
}
}
void postOrderRecursive(struct TreeNode* root) {
if (root != NULL) {
postOrderRecursive(root->left);
postOrderRecursive(root->right);
printf("%d ", root->data);
}
}
void inOrderIterative(struct TreeNode* root) {
struct TreeNode* stack[100];
int top = -1;
struct TreeNode* current = root;
while (current != NULL || top != -1) {
while (current != NULL) {
stack[++top] = current;
current = current->left;
}
current = stack[top--];
printf("%d ", current->data);
current = current->right;
}
}

void preOrderIterative(struct TreeNode* root) {
if (root == NULL) {
return;
}
struct TreeNode* stack[100];
int top = -1;
stack[++top] = root;
while (top != -1) {
struct TreeNode* current = stack[top--];
printf("%d ", current->data);
if (current->right != NULL) {
stack[++top] = current->right;
}
93
if (current->left != NULL) {
stack[++top] = current->left;
}
}
}

void postOrderIterative(struct TreeNode* root) {
if (root == NULL) {
return;
}
struct TreeNode* stack1[100];
struct TreeNode* stack2[100];
int top1 = -1;
int top2 = -1;
stack1[++top1] = root;
while (top1 != -1) {
struct TreeNode* current = stack1[top1--];
stack2[++top2] = current;
if (current->left != NULL) {
stack1[++top1] = current->left;
}
if (current->right != NULL) {
stack1[++top1] = current->right;
}
}
while (top2 != -1) {
printf("%d ", stack2[top2--]->data);
}
}

void freeTree(struct TreeNode* root) {
if (root != NULL) {
freeTree(root->left);
freeTree(root->right);
free(root);
}
}
int main() {
struct TreeNode* root = NULL;
root = insert(root, 10);
 insert(root, 5);
 insert(root, 15);
 insert(root, 3); 
insert(root, 7);
 insert(root, 12); 
insert(root, 18);
  printf("In-order (recursive): ");
 inOrderRecursive(root);
 printf("\n");
 printf("Pre-order (recursive): "); 
preOrderRecursive(root);
 printf("\n");
 printf("Post-order (recursive): ");
 postOrderRecursive(root);
 printf("\n");
 printf("In-order (iterative): ");
 inOrderIterative(root); 
printf("\n");
 printf("Pre-order (iterative): "); 
preOrderIterative(root);
 printf("\n"); 
printf("Post-order (iterative): "); 
postOrderIterative(root);
 printf("\n"); 
 freeTree(root); 
return 0;
 }