#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#define MAX_SIZE 100
struct Stack {
int arr[MAX_SIZE];
int top;
};

void initializeStack(struct Stack *stack) {
stack->top = -1;
}

int isEmpty(struct Stack *stack) {
return stack->top == -1;
}
// Check if the stack is full
int isFull(struct Stack *stack) {
return stack->top == MAX_SIZE - 1;
}

void push(struct Stack *stack, int value) {

if (isFull(stack)) {
printf("Stack overflow. Cannot push element.\n");
exit(EXIT_FAILURE);
}
stack->arr[++stack->top] = value;
}

int pop(struct Stack *stack) {
if (isEmpty(stack)) {
printf("Stack underflow. Cannot pop element.\n");
exit(EXIT_FAILURE);
}
return stack->arr[stack->top--];
}
// Evaluate postfix expression
int evaluatePostfix(char *expression) {
struct Stack stack;
initializeStack(&stack);
for (int i = 0; expression[i] != '\0'; ++i) {
if (isdigit(expression[i])) {
push(&stack, expression[i] - '0');
} else {

int operand2 = pop(&stack);

int operand1 = pop(&stack);
switch (expression[i]) {
case '+':
push(&stack, operand1 + operand2);
break;
case '-':
push(&stack, operand1 - operand2);
break;
case '*':
push(&stack, operand1 * operand2);
break;
case '/':
push(&stack, operand1 / operand2);
break;
default:
printf("Invalid operator: %c\n", expression[i]);
exit(EXIT_FAILURE);
}
}
}

return pop(&stack);
}
int main() {
char expression[] = "235*+";
int result = evaluatePostfix(expression);
printf("Result of postfix expression %s is: %d\n", expression, result);

return 0;
}