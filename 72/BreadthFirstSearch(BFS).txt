#include <stdio.h>
#include <stdlib.h>
struct Node {
int data;
struct Node* next;
};
struct Graph {
int vertices;
struct Node** adjacencyList;
};
struct Node* createNode(int data) {
struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
newNode->data = data;
newNode->next = NULL;
return newNode;
}
struct Graph* createGraph(int vertices) {
struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
graph->vertices = vertices;
graph->adjacencyList = (struct Node**)malloc(vertices * sizeof(struct Node*));
for (int i = 0; i < vertices; ++i)
graph->adjacencyList[i] = NULL;
return graph;
}

void addEdge(struct Graph* graph, int src, int dest) {

struct Node* newNode = createNode(dest);
newNode->next = graph->adjacencyList[src];
graph->adjacencyList[src] = newNode;

newNode = createNode(src);
newNode->next = graph->adjacencyList[dest];
graph->adjacencyList[dest] = newNode;
}
void BFS(struct Graph* graph, int startVertex) {
int* visited = (int*)malloc(graph->vertices * sizeof(int));
for (int i = 0; i < graph->vertices; ++i)
visited[i] = 0; 
int* queue = (int*)malloc(graph->vertices * sizeof(int));
int front = 0, rear = 0;

queue[rear++] = startVertex;
visited[startVertex] = 1;
while (front < rear) {
int currentVertex = queue[front++];
printf("%d ", currentVertex);
struct Node* temp = graph->adjacencyList[currentVertex];
while (temp != NULL) {
int adjVertex = temp->data;

if (!visited[adjVertex]) {
queue[rear++] = adjVertex;
visited[adjVertex] = 1;
}
temp = temp->next;
}
}

free(visited);

free(queue);
}
int main() {
int vertices = 6;
struct Graph* graph = createGraph(vertices);
addEdge(graph, 0, 1);
addEdge(graph, 0, 2);
addEdge(graph, 1, 3);
addEdge(graph, 1, 4);
addEdge(graph, 2, 4);
addEdge(graph, 3, 5);
addEdge(graph, 4, 5);

printf("Breadth-First Search (BFS) starting from vertex 0:\n");
BFS(graph, 0);
for (int i = 0; i < vertices; ++i) {
struct Node* temp = graph->adjacencyList[i];
while (temp != NULL) {
struct Node* next = temp->next;
free(temp);
temp = next;
}

}
free(graph->adjacencyList);
free(graph);
return 0;
}