#include<stdio.h>
#include<stdlib.h>
struct Node {
int data;
struct Node *prev,*next;
};
struct Node *head=NULL;
struct Node *tail=NULL;
void Create()
{
struct Node *newNode=(struct Node *)malloc(sizeof(struct Node));
printf("Enter the data in the newnode: ");
scanf("%d",&newNode->data);
newNode->next=NULL;
if(head==NULL){
head=newNode;
tail=newNode;
head->next=head;
head->prev=head;
}
else{
tail->next=newNode;
newNode->prev=tail;
newNode->next=head;
head->prev=newNode;
tail=newNode;
}
}
void linkedListTraversal(){
struct Node *ptr=(struct Node *)malloc(sizeof(struct Node));
ptr=head;
while(ptr!=tail){
printf("%d\n",ptr->data);
ptr=ptr->next;
}
printf("%d\n",ptr->data);
}
struct Node *InsertAtfirst(){
struct Node *newNode=(struct Node *)malloc(sizeof(struct Node));
struct Node *p=head;
printf("Enter the data in the new node: ");
30
scanf("%d",&newNode->data);
newNode->next=NULL;
if(head==NULL){
head=newNode;
tail=newNode;
newNode->prev=tail;
newNode->next=head;
}
else{
newNode->next=head;
head->prev=newNode;
newNode->prev=tail;
tail->next=newNode;
head=newNode;
}
return head;
}
struct Node *InsertAtEnd(){
struct Node *newNode=(struct Node *)malloc(sizeof(struct Node));
printf("Enter the data in the new node: ");
scanf("%d",&newNode->data);
newNode->next=NULL;
if(head==NULL){
head=newNode;
tail=newNode;
newNode->prev=tail;
newNode->next=head;
}
else{
newNode->prev=tail;
tail->next=newNode;
newNode->next=head;
head->prev=newNode;
tail=newNode;
}
return head;
}
struct Node *InsertAtIndex(){
int i=1,n;
struct Node *newNode=(struct Node *)malloc(sizeof(struct Node));
struct Node *p=head;
printf("Enter the data in the new node: ");
scanf("%d",&newNode->data);
newNode->next=NULL;
printf("Enter the index: ");
scanf("%d",&n);
while(i!=(n-1))
{
p=p->next;
 i++; }
newNode->prev=p; 
newNode->next=p->next;
 p->next->prev=newNode;
 p->next=newNode; 
return head; 
}
struct Node *deleteFirst()
{ 
struct Node *ptr=head;
 head=head->next;
 head->prev=tail;
 tail->next=head;
 free(ptr);
 return head; 
}
struct Node *deleteAtLast(){ 
struct Node *ptr=tail;
 tail=tail->prev; 
tail->next=head;
 head->prev=tail;
 free(ptr);
 return head;
 }
struct Node *deleteAtIndex()
{ struct Node *ptr=head; 
int i=1,index; 
printf("Enter the index at which the node is to be inserted:");
 scanf("%d",&index); 
while(i<index){
 ptr=ptr->next; i++; 
}
ptr->prev->next=ptr->next;
 ptr->next->prev=ptr->prev;
 if(ptr->next==head)
{ 
tail=ptr->prev;
 free(ptr);
 }
else
{ 
free(ptr);
 }
return head;
 }
int main() { 
int choice,num; 
int index;
int n;
printf("Enter the no.of nodes need to be added: ");
scanf("%d",&n);
for(int i=0;i<n;i++){
Create(i);
}
linkedListTraversal();
while(1){
printf("Operations on Doubly Circular linked list are: \n1.Insert at begining.\n");
printf("2.Insert at index.\n");
printf("3.Insert at end.\n");
printf("4.Delete at first\n");
printf("5.Delete at index\n");
printf("6.Delete at last\n");
printf("7.End\n");
printf("Enter the choice of operation you need in linked list: ");
scanf("%d",&choice);
switch(choice){
case 1 :
printf("Linked list before insertion:\n");
linkedListTraversal();
head = InsertAtfirst();
printf("After insertion at begining:\n");
linkedListTraversal(head);
break;
case 2 :
printf("Linked list before insertion:\n");
linkedListTraversal();
printf("Enter the index at which the node to be inserted: ");
scanf("%d",&index);
head = InsertAtIndex();
printf(" After insertion at index %d :\n",index);
linkedListTraversal();
break;
case 3:
printf("Linked list before insertion:\n");
linkedListTraversal();
head = InsertAtEnd();
printf(" After insertion at end: \n");
linkedListTraversal();
break;
case 4:
printf("Deleting the first Node\n");
head=deleteFirst();
printf("Linked list after Deletion\n");
linkedListTraversal();
33
break;
case 5:
head=deleteAtIndex();
printf("Linked list after Deletion\n");
linkedListTraversal();
break;
case 6:
printf("Deleting the last Node\n");
head=deleteAtLast();
printf("Linked list after Deletion\n");
linkedListTraversal();
break;
case 7:
printf("The program has ended\n");
exit(0);
default:
printf("****** Invalid choice *******\n");
}
}
return 0;
}
