#include <stdio.h> 
#include <limits.h> 
#include <stdbool.h> 
 
#define MAX 100 
 
int minDistance(int dist[], bool sptSet[], int V) { 
    int min = INT_MAX, min_index; 
 
    for (int v = 0; v < V; v++) 
        if (sptSet[v] == false && dist[v] <= min) 
            min = dist[v], min_index = v; 
 
    return min_index; 
} 
 
void printSolution(int dist[], int V) { 
    printf("Vertex \t Distance from Source\n"); 
    for (int i = 0; i < V; i++) 
        printf("%d \t\t %d\n", i, dist[i]); 
} 
 
void dijkstra(int graph[MAX][MAX], int V, int src) { 
    int dist[MAX]; 
    bool sptSet[MAX]; 
 
    for (int i = 0; i < V; i++) 
        dist[i] = INT_MAX, sptSet[i] = false; 
 
    dist[src] = 0; 
 
    for (int count = 0; count < V - 1; count++) { 
        int u = minDistance(dist, sptSet, V); 
 
        sptSet[u] = true; 
 
        for (int v = 0; v < V; v++) 
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX  
                && dist[u] + graph[u][v] < dist[v]) 
                dist[v] = dist[u] + graph[u][v]; 
    } 
 
    printSolution(dist, V); 
} 
 
 
 
int main() { 
    int V, src; 
    int graph[MAX][MAX]; 
 
    printf("Enter the number of vertices: "); 
    scanf("%d", &V); 
 
    printf("Enter the adjacency matrix of the graph:\n"); 
    for (int i = 0; i < V; i++) 
        for (int j = 0; j < V; j++) 
            scanf("%d", &graph[i][j]); 
 
    printf("Enter the source vertex: "); 
    scanf("%d", &src); 
 
    dijkstra(graph, V, src); 
 
    return 0; 
} 

Output: 
 
Enter the number of vertices: 5 
Enter the adjacency matrix of the graph: 
0 10 0 0 5 
0 0 1 0 2 
0 0 0 4 0 
7 0 6 0 0 
0 3 9 2 0 
Enter the source vertex: 0 
Vertex   Distance from Source 
0                 0 
1                 8 
2                 9 
3                 7  
4                 5