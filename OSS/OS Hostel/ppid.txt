1)Write a C program to create a child process using fork() and display the process IDs of both child and parent processes.

#include <stdio.h>
#include <unistd.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        printf("Fork failed.\n");
    } else if (pid == 0) {
        // Child process
        printf("Child Process: PID = %d, Parent PID = %d\n", getpid(), getppid());
    } else {
        // Parent process
        printf("Parent Process: PID = %d, Child PID = %d\n", getpid(), pid);
    }

    return 0;
}

2)Write a program where the parent process waits for the child to complete using wait().

#include <stdio.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        printf("Fork failed.\n");
    } else if (pid == 0) {
        printf("Child Process (PID = %d) is running.\n", getpid());
        sleep(2);  // Simulate some work
        printf("Child Process finished.\n");
    } else {
        wait(NULL);  // Parent waits for child
        printf("Parent Process (PID = %d) resumed after child.\n", getpid());
    }

    return 0;
}

3)Write a program to print the PID and PPID using getpid() and getppid().

#include <stdio.h>
#include <unistd.h>

int main() {
    printf("Current Process ID (PID): %d\n", getpid());
    printf("Parent Process ID (PPID): %d\n", getppid());
    return 0;
}
